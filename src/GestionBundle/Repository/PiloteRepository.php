<?php

namespace GestionBundle\Repository;

/**
 * PiloteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PiloteRepository extends \Doctrine\ORM\EntityRepository
{

    public function getAllPilotesByFilters($bases, $role, $fonction, $flottes, $prolong61, $prolong62, $prolong63, $prolong64, $prolong65) {
        $parameters = array();
        $qb = $this->createQueryBuilder('p');
        $qb->select('p');
        
       
        if ($bases != null) {      
            $qb->andWhere('p.base IN (:bases)');
            $parameters['bases'] = $bases;
        }
        if ($flottes != null) {
            $qb->andWhere('p.flotte IN (:flottes)');
            $parameters['flottes'] = $flottes;
        }
        
        if ($fonction != null) {
            if ($fonction == "All Fonctions"){
              // Toutes les fonctions 
            }elseif ($fonction > 1){ 
              // Toutes les fonctions cadre
                $qb->andWhere('p.fonction IN (:fonction)');
                $parameters['fonction'] = $fonction;
            }else{
            $qb->andWhere("p.fonction = :fonction");
            $parameters['fonction'] = $fonction;
            }
             
        }
        if ($role != null) {
            if ($role == "All Roles"){
             // Affiche tous les roles  
            }else{
            $qb->andWhere("p.role = :role");
            $parameters['role'] = $role;}
        }
        if ($prolong61 != null) {
            $qb->andWhere("p.prolong61 = :prolong61");
            $parameters['prolong61'] = $prolong61;
        }
        if ($prolong62 != null) {
            $qb->andWhere("p.prolong62 = :prolong62");
            $parameters['prolong62'] = $prolong62;
        }
        if ($prolong63 != null) {
            $qb->andWhere("p.prolong63 = :prolong63");
            $parameters['prolong63'] = $prolong63;
        }
        if ($prolong65 != null) {
            $qb->andWhere("p.prolong65 = :prolong65");
            $parameters['prolong65'] = $prolong65;
        }
        if ($prolong64 != null) {
            $qb->andWhere("p.prolong64 = :prolong64");
            $parameters['prolong64'] = $prolong64;
        }
        $qb->setParameters($parameters);
        return $qb->getQuery()->getResult();
    }


    public function findById($id)
    {
        return $this
          ->createQueryBuilder('p')
          ->where("p.id_pilote = :id")
          ->setParameters(array(
                                'id'=> $id))->getQuery()->getResult();

    }

		public function findByMatriculeNom($matricule, $nom)
    {
        return $this
          ->createQueryBuilder('p')
          ->where("p.matricule = :matricule")
          ->andWhere("p.nom = :nom")
          ->setParameters(array(
                                'matricule'=> $matricule,
                                'nom'=> $nom))->getQuery()->getResult();
    }
    	public function findByNom($nom)
    {
        return $this
          ->createQueryBuilder('p')
          ->andWhere("p.nom = :nom")
          ->setParameters(array(
                                'nom'=> $nom))->getQuery()->getResult();
    }
    	public function findByMatricule($matricule)
    {
        return $this
          ->createQueryBuilder('p')
          ->where("p.matricule = :matricule")
          ->setParameters(array(
                                'matricule'=> $matricule))->getQuery()->getResult();
    }

    public function findByRFFB($role, $fonction, $flotte, $base)
    {
        return $this
          ->createQueryBuilder('p')
          ->where("p.role = :role")
          ->andWhere("p.fonction = :fonction")
          ->andWhere("p.base = :base")
          ->andWhere("p.flotte = :flotte")
          ->setParameters(array(
                                'role'=> $role,
                                'fonction'=> $fonction,
                                'base'=> $base,
                                'flotte'=> $flotte))->getQuery()->getResult();
    }
    public function findByRoleFonction($role, $fonction)
    {
        return $this
          ->createQueryBuilder('p')
          ->where("p.role = :role")
          ->andWhere("p.fonction = :fonction")
          ->setParameters(array(
                                'role'=> $role,
                                'fonction'=> $fonction))->getQuery()->getResult();
    }
    public function findByRoleBase($role, $base)
    {
        return $this
          ->createQueryBuilder('p')
          ->where("p.role = :role")
          ->andWhere("p.base = :base")
          ->setParameters(array(
                                'role'=> $role,
                                'base'=> $base))->getQuery()->getResult();
    }
    public function findByRoleFlotte($role, $flotte)
    {
        return $this
          ->createQueryBuilder('p')
          ->where("p.role = :role")
          ->andWhere("p.flotte = :flotte")
          ->setParameters(array(
                                'role'=> $role,
                                'flotte'=> $flotte))->getQuery()->getResult();
    }

    public function findByFonctionBase($fonction, $base)
    {
        return $this
          ->createQueryBuilder('p')
          ->Where("p.fonction = :fonction")
          ->andWhere("p.base = :base")
          ->setParameters(array('fonction'=> $fonction,
                                'base'=> $base))->getQuery()->getResult();
    }
    public function findByFonctionFlotte($fonction, $flotte)
    {
        return $this
          ->createQueryBuilder('p')
          ->Where("p.fonction = :fonction")
          ->andWhere("p.flotte = :flotte")
          ->setParameters(array('fonction'=> $fonction,
                                'flotte'=> $flotte))->getQuery()->getResult();
    }
    public function findByBaseFlotte($flotte, $base)
    {
        return $this
          ->createQueryBuilder('p')
          ->Where("p.base = :base")
          ->andWhere("p.flotte = :flotte")
          ->setParameters(array(
                                'base'=> $base,
                                'flotte'=> $flotte))->getQuery()->getResult();
    }
}
